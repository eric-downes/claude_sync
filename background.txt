# Claude Code cannot access project knowledge

Claude Code currently **does not support** accessing documents uploaded to project knowledge within your Anthropic account. This functionality doesn’t exist as of July 2025, despite being highly requested by developers.

The lack of integration means Claude Code operates completely independently from Claude.ai Projects. While you can use both platforms, they maintain separate contexts and cannot share uploaded documents or knowledge bases. This represents a significant limitation for developers hoping to leverage their curated project knowledge in terminal-based coding workflows.

## Current capabilities reveal a clear separation

Claude Code excels at local development tasks but lacks any connection to Claude.ai’s project system. The tool can analyze your entire codebase, edit files directly, and integrate with external data sources through Model Context Protocol (MCP) servers.  It works seamlessly with VS Code and JetBrains IDEs, and can even interact with GitHub PRs through Actions.   However, it has **no mechanism** to access documents you’ve uploaded to Claude.ai Projects.

The authentication systems remain entirely separate. Claude Code uses API keys or OAuth tokens through the Anthropic Console,   while Claude.ai Projects exist within the web interface.   No configuration option exists to link these two environments, meaning your carefully curated project knowledge remains inaccessible to your terminal-based coding assistant.

## Configuration options focus on local context only

Claude Code’s configuration revolves around local project files rather than cloud-based knowledge. The `.claude/settings.json` file stores project-specific configurations, while `CLAUDE.md` files can link to local markdown documents. You can create custom slash commands stored in `.claude/commands/` folders,  but none of these options provide access to uploaded project documents.

The most relevant configuration capability is MCP integration, which allows connecting to external data sources. For example, you can configure a filesystem MCP server to access local documents:

```json
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/docs"]
    }
  }
}
```

This provides document access, but only for files stored locally or accessible through supported MCP servers like Google Drive or Notion— not for Claude.ai project knowledge.

## Workarounds require manual knowledge management

Without native integration, developers must resort to manual workarounds. The most practical approach involves **exporting documents** from Claude.ai Projects and maintaining them as local files that Claude Code can access. You can organize these in a dedicated documentation folder and reference them through `CLAUDE.md` files or MCP servers.

Some developers adopt hybrid workflows, using web-based Claude for knowledge-intensive research and planning, then switching to Claude Code for implementation. This context switching proves inefficient but remains the only way to leverage both platforms’ strengths. Custom automation scripts can help sync knowledge between platforms, though this requires ongoing maintenance.

Creating project-specific slash commands offers another partial solution. You can encode frequently used project information into custom commands, making critical knowledge quickly accessible within Claude Code.  However, this approach works only for static information and doesn’t scale well for large knowledge bases.

## Active feature request signals future development

GitHub issue **#2511** titled “Connect Claude code to Claude projects” has garnered 18+ upvotes from the developer community. The discussion reveals strong demand for this integration, with developers proposing various implementation approaches. Suggested solutions include extending `.claude/settings.json` to reference specific projects, adding commands to sync project knowledge, and creating configuration options to link terminal sessions with web-based projects.

Anthropic hasn’t announced an implementation timeline, but recent updates show continued investment in Claude Code’s capabilities. The 2024-2025 updates brought Claude 4 model integration, enhanced IDE support, and improved GitHub Actions.  The company’s emphasis on expanding “native integrations with popular applications”  and developing the MCP ecosystem  suggests project integration could arrive in future releases.

## Enterprise users have limited alternatives

Organizations requiring unified knowledge management face particular challenges. While Anthropic offers enterprise deployment through Amazon Bedrock and Google Vertex AI, these options don’t solve the project knowledge integration problem.  The promised GitHub Enterprise integration focuses on code repository interaction rather than knowledge base access.

For teams needing immediate solutions, building custom MCP servers presents the most flexible option. A dedicated MCP server could theoretically bridge Claude.ai Projects with Claude Code, though this requires significant development effort.  Some organizations maintain parallel documentation systems—one optimized for Claude.ai’s web interface and another for Claude Code’s local access.

## Conclusion

Claude Code’s inability to access project knowledge represents a significant gap in Anthropic’s ecosystem. Developers must choose between the rich context of Claude.ai Projects and the powerful coding capabilities of Claude Code, unable to combine both strengths. While workarounds exist, they add friction to development workflows and prevent teams from fully leveraging their accumulated project knowledge.

The strong community demand reflected in GitHub issue #2511 suggests this integration will eventually arrive.  Until then, developers should structure their project documentation for easy migration when the feature launches, while using local files, MCP servers, and hybrid workflows to bridge the current gap. Organizations evaluating Claude for development workflows must consider this limitation carefully when planning their AI-assisted development strategies.
