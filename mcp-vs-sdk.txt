Using Anthropic SDK vs MCP.

Short Story: MCP recommended

Long story:

Based on my research, both approaches face the **same fundamental limitation**: there are no official APIs to access Claude.ai project knowledge. Project knowledge is exclusively part of the Claude.ai web interface and isn’t exposed through any documented API endpoints  .

However, **a custom MCP server would be significantly more robust** than using the Claude SDK directly. Here’s why:

## MCP Server Approach is More Robust

### **1. Official Integration Path**

The MCP connector on the Anthropic API is specifically designed for extending Claude’s capabilities with external data sources . It’s the official way to bring external knowledge into Claude Code, making it future-proof when APIs do become available.

### **2. Seamless Claude Code Integration**

MCP servers integrate directly into Claude Code’s workflow through the `--mcp-config` flag and appear as native tools . Your project knowledge would be accessible through natural commands like `claude -p "explain our architecture" --mcp-config project-knowledge.json`.

### **3. Built-in Caching and Context Management**

MCP servers handle context window management automatically, while a direct SDK approach would require you to implement chunking, relevance scoring, and context optimization yourself.

## Claude SDK Approach Has Major Limitations

### **1. No Project Knowledge APIs**

The Claude API focuses on direct model interactions and doesn’t include any endpoints for project management or knowledge access  . You’d be building on a foundation that doesn’t exist.

### **2. Authentication Complexity**

Claude.ai projects use web session authentication, while the API uses x-api-key headers . There’s no documented way to bridge these authentication systems.

### **3. Anthropic’s Stance on Reverse Engineering**

Anthropic has sent takedown notices to developers trying to reverse-engineer Claude Code , suggesting they’re protective of undocumented interfaces.

## Practical Implementation Strategy

**Best approach**: Build an MCP server that manages a local mirror of your project knowledge:

```json
{
  "mcpServers": {
    "project-knowledge": {
      "command": "node",
      "args": ["./project-knowledge-server.js"]
    }
  }
}
```

Your MCP server would:

1. Maintain local copies of project documents (manually synced or scripted)
1. Implement search and retrieval capabilities
1. Handle context window optimization
1. Be ready to integrate official APIs when they arrive

This approach aligns with Anthropic’s new agent capabilities focus on MCP connectors and the Files API , suggesting this is their intended path for knowledge integration.

**Bottom line**: While neither approach can access project knowledge directly today, the MCP server route builds on official infrastructure and positions you perfectly for when native integration arrives.
